#include <Adafruit_GFX.h>
#include <gfxfont.h>




/*********************************************************************
This is an example for our Monochrome OLEDs based on SSD1306 drivers

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/category/63_98

This example is for a 128x64 size display using I2C to communicate
3 pins are required to interface (2 I2C and one reset)

Adafruit invests time and resources providing this open source code, 
please support Adafruit and open-source hardware by purchasing 
products from Adafruit!

Written by Limor Fried/Ladyada  for Adafruit Industries.  
BSD license, check license.txt for more information
All text above, and the splash screen must be included in any redistribution
*********************************************************************/

//#include <SPI.h>
#define CH1 8
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);


#define LOGO16_GLCD_HEIGHT 64
#define LOGO16_GLCD_WIDTH  128
byte incomingByte;
String inputString = "";         // a string to hold incoming data
boolean stringComplete = false;  // whether the string is complete
int hold = 0;
long result = 0;
long counter = 0;

const unsigned char PROGMEM logo16_glcd_bmp[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00,
0x3F, 0x90, 0xFE, 0x18, 0x13, 0xF9, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x20, 0x01, 0x00,
0x30, 0x11, 0x83, 0x18, 0x10, 0x41, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x30, 0x00, 0x80,
0x30, 0x13, 0x01, 0x98, 0x10, 0x41, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x38, 0x00, 0x80,
0x30, 0x12, 0x00, 0x18, 0x10, 0x41, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x1C, 0x00, 0x40,
0x31, 0x16, 0x00, 0x18, 0x10, 0x41, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x0C, 0x00, 0x40,
0x3F, 0x16, 0x00, 0x1F, 0xF0, 0x41, 0xFF, 0x1F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x06, 0x00, 0x20,
0x30, 0x16, 0x0F, 0x98, 0x10, 0x41, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x03, 0x00, 0x20,
0x30, 0x12, 0x00, 0x98, 0x10, 0x41, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x03, 0x00, 0x10,
0x30, 0x13, 0x00, 0x98, 0x10, 0x41, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x80, 0x10,
0x30, 0x11, 0x81, 0x98, 0x10, 0x41, 0x03, 0x1F, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x01, 0x80, 0x10,
0x30, 0x11, 0xC7, 0x18, 0x10, 0x41, 0x03, 0x1F, 0xFF, 0xFF, 0xF8, 0x00, 0x08, 0x00, 0xC0, 0x08,
0x3F, 0x90, 0x7C, 0x18, 0x10, 0x41, 0x03, 0x1F, 0xFF, 0xFF, 0xE0, 0x00, 0x0C, 0x00, 0xC0, 0x08,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0x80, 0x00, 0x0C, 0x00, 0x40, 0x08,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x0E, 0x00, 0x60, 0x08,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xF0, 0x00, 0x00, 0x0E, 0x00, 0x60, 0x04,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFE, 0x00, 0x00, 0x00, 0x06, 0x00, 0x60, 0x04,
0x00, 0x00, 0x00, 0x07, 0xE0, 0x11, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x20, 0x04,
0x00, 0x00, 0x00, 0x06, 0x70, 0x31, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x30, 0x04,
0x00, 0x00, 0x00, 0x04, 0x18, 0x38, 0xC6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x30, 0x04,
0x00, 0x00, 0x00, 0x04, 0x0C, 0x28, 0x4C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x30, 0x04,
0x00, 0x00, 0x00, 0x04, 0x0C, 0x6C, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x30, 0x04,
0x00, 0x00, 0x00, 0x04, 0x04, 0x4C, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x30, 0x04,
0x00, 0x00, 0x00, 0x04, 0x04, 0xC4, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x30, 0x04,
0x00, 0x00, 0x00, 0x04, 0x0C, 0xFE, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x30, 0x04,
0x00, 0x00, 0x00, 0x04, 0x0D, 0xFE, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x30, 0x04,
0x00, 0x00, 0x00, 0x04, 0x19, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x30, 0x04,
0x00, 0x00, 0x00, 0x06, 0x33, 0x01, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x30, 0x04,
0x00, 0x00, 0x00, 0x07, 0xE3, 0x01, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x20, 0x04,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0x00, 0x00, 0x00, 0x07, 0x00, 0x60, 0x04,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xF0, 0x00, 0x00, 0x0E, 0x00, 0x60, 0x04,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFE, 0x00, 0x00, 0x0E, 0x00, 0x60, 0x0C,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xFF, 0xFF, 0xC0, 0x00, 0x0C, 0x00, 0x40, 0x08,
0x0F, 0x03, 0xE0, 0x81, 0x20, 0x09, 0xE0, 0x1F, 0xFF, 0xFF, 0xE0, 0x00, 0x0C, 0x00, 0xC0, 0x08,
0x19, 0x8E, 0x38, 0x81, 0x30, 0x09, 0xF8, 0x1F, 0xFF, 0xFF, 0xF8, 0x00, 0x08, 0x00, 0xC0, 0x08,
0x30, 0x18, 0x08, 0x81, 0x38, 0x09, 0x0C, 0x1F, 0xFF, 0xFF, 0xFE, 0x00, 0x00, 0x01, 0x80, 0x18,
0x30, 0x10, 0x0C, 0x81, 0x3C, 0x09, 0x06, 0x1F, 0xFF, 0xFF, 0xFF, 0x00, 0x00, 0x01, 0x80, 0x10,
0x18, 0x30, 0x04, 0x81, 0x26, 0x09, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0x80, 0x00, 0x03, 0x00, 0x10,
0x0E, 0x30, 0x06, 0x81, 0x33, 0x09, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0xC0, 0x00, 0x03, 0x00, 0x20,
0x07, 0x20, 0x06, 0x81, 0x31, 0x89, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x06, 0x00, 0x20,
0x01, 0xB0, 0x06, 0x81, 0x30, 0xC9, 0x03, 0x1F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x0C, 0x00, 0x60,
0x00, 0x90, 0x04, 0x81, 0x30, 0x49, 0x02, 0x1F, 0xFF, 0xFF, 0xFF, 0xF0, 0x00, 0x1C, 0x00, 0x40,
0x20, 0x98, 0x0C, 0x81, 0x30, 0x39, 0x06, 0x1F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x18, 0x00, 0xC0,
0x31, 0x8C, 0x18, 0xC3, 0x30, 0x19, 0x0C, 0x1F, 0xFF, 0xFF, 0xFF, 0xF8, 0x00, 0x30, 0x00, 0x80,
0x1F, 0x07, 0xF0, 0x7E, 0x30, 0x09, 0xF8, 0x1F, 0xFF, 0xFF, 0xFF, 0xFC, 0x00, 0x20, 0x01, 0x80,
0x0E, 0x01, 0xC0, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void setup()   {                
  Serial.begin(9600);
  inputString.reserve(400);
  pinMode(CH1,OUTPUT);
  digitalWrite(CH1,LOW);
  digitalWrite(2,HIGH);

  // by default, we'll generate the high voltage from the 3.3v line internally! (neat!)
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
  // init done

  // logo display for 5 seconds
  //display.display();
  display.clearDisplay();
  display.drawBitmap(0, 0,  logo16_glcd_bmp, 128, 64, 1);
  display.display();
  delay(1000); 
  
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(2);
  display.setCursor(0,0);
  display.println("Notice:");
  display.setTextSize(1);
  display.println("");
  display.println("Sensor requires 30sec");
  display.println("after 1st angle shown");
  display.println("to fully calibrate.");
  display.println("");
  display.println(" www.8thdaysound.com");
  display.display();
  delay(10000); 
}


void loop() {
   delay(2);

    if (Serial.available()==0) {
      if (hold >= 50 && hold < 650 ) {
    // display error message when no serial data detected
    digitalWrite(A2,HIGH);
    counter = 0;
    display.clearDisplay();
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.println(" No Sensor Detected!");
    display.println("");
    display.println("Check all connections");
    display.println("");
    display.println("Voltage must be above");
    display.println("4.7 VDC to function!");
     display.println("");
    display.print("Current voltage: ");
    display.println(readVcc()*0.001);
    display.display();
      }
      else if (hold >= 650 && hold < 1000) {
        display.clearDisplay();
        display.drawBitmap(0, 0,  logo16_glcd_bmp, 128, 64, 1);
        display.display();
      }
      else if (hold >= 1000 && hold < 1650) {
        display.clearDisplay();
        display.setTextColor(WHITE);
        display.setTextSize(2);
        display.setCursor(0,0);
        display.println("Notice:");
        display.setTextSize(1);
        display.println("");
        display.println("Sensor requires 30sec");
        display.println("after 1st angle shown");
        display.println("to fully calibrate.");
        display.println("");
        display.println(" www.8thdaysound.com");
        display.display();
      }
      else if (hold >= 1650) {
        hold = 50;
      }
   }

  
    else if (stringComplete) {
      //Serial.println(inputString);
      hold = 0;
      // text display setup
      display.clearDisplay();
      display.setTextSize(1);
      display.setTextColor(WHITE);
      display.setCursor(0,0);
      // display.setTextColor(BLACK, WHITE); // 'inverted' text
      display.setTextSize(1);
      display.println("   Eighth Day Sound");
      display.println("");
      if (readVcc()*0.001 < 4.75){
        counter = 0;
        display.setTextSize(2);
        display.println(" Low Batt!");
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.println("NO LASER-CLINO WORKS");
        display.println("");
        display.setTextSize(2);
        display.print("Tilt "); 
        display.println(inputString.toInt()*0.1);
        display.setTextSize(1);
      }
      else if (readVcc()*0.001 >= 4.75){
        display.println("");
        display.setTextSize(2);
        display.setTextColor(WHITE);
        display.print("Tilt "); 
        display.println(inputString.toInt()*0.1);
        display.setTextSize(1);
        
      }
      if (counter > 100000) {
        digitalWrite(CH1,HIGH);
        display.println("");
        display.println("   AUTO LASER OFF"); 
        display.println("Cycle Power to Reset!");
        
      }
      else {
        digitalWrite(CH1,LOW);
        display.println("");
        display.print("Laser off in: ");
        display.print((100000-counter)*0.01);
        display.println("s");
        display.println(" www.8thdaysound.com");
      }
      
      display.display();
      // clear the string:
        inputString = "";
        stringComplete = false;
  }
   hold++;
   counter++;
   
   
}


void serialEvent() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    // add it to the inputString:
    //inputString += inChar;
    // if the incoming character is a newline, set a flag
    // so the main loop can do something about it:
    if (inChar == '\n') {
      stringComplete = true;
    }
    else {
      inputString += inChar;
    }
  }
}

long readVcc() {
  // Read 1.1V reference against AVcc
  // set the reference to Vcc and the measurement to the internal 1.1V reference
  #if defined(__AVR_ATmega32U4__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
    ADMUX = _BV(REFS0) | _BV(MUX4) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
  #else
    ADMUX = _BV(REFS0) | _BV(MUX3) | _BV(MUX2) | _BV(MUX1);
  #endif  

  delay(2); // Wait for Vref to settle
  ADCSRA |= _BV(ADSC); // Start conversion
  while (bit_is_set(ADCSRA,ADSC)); // measuring

  uint8_t low  = ADCL; // must read ADCL first - it then locks ADCH  
  uint8_t high = ADCH; // unlocks both

  long result = (high<<8) | low;

  result = 1125300L / result; // Calculate Vcc (in mV); 1125300 = 1.1*1023*1000
  return result; // Vcc in millivolts
}

